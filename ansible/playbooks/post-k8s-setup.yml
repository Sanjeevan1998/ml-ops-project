- name: Post Kubernetes Setup
  hosts: all
  become: yes
  vars:
    ansible_user: cc

  tasks:
    # --- Setup kubectl access
    - name: Ensure .kube directory exists
      file:
        path: "/home/{{ ansible_user }}/.kube"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
      when: inventory_hostname in ['node1', 'node2']

    - name: Copy admin.conf to user's kubeconfig
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "/home/{{ ansible_user }}/.kube/config"
        remote_src: yes
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'
      when: inventory_hostname in ['node1', 'node2']

    - name: Run kubectl get nodes as cc
      command: kubectl get nodes
      become_user: "{{ ansible_user }}"
      register: kubectl_output
      when: inventory_hostname in ['node1', 'node2']

    - name: Show kubectl get nodes output
      debug:
        msg: "{{ kubectl_output.stdout_lines }}"
      when: inventory_hostname in ['node1', 'node2']

    # --- Setup Docker access for cc
    - name: Add user 'cc' to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Restart Docker
      systemd:
        name: docker
        state: restarted
        enabled: yes

    - name: Verify Docker group membership
      command: id {{ ansible_user }}
      register: cc_id

    - name: Show user groups
      debug:
        msg: "{{ cc_id.stdout }}"

- name: Kubernetes Dashboard and ArgoCD Setup
  hosts: node1
  become: yes
  vars:
    ansible_user: cc

  tasks:
    # --- Kubernetes Dashboard Setup
    - name: Create dashboard admin-user and RBAC
      shell: |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: admin-user
          namespace: kube-system
        ---
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: admin-user
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: cluster-admin
        subjects:
        - kind: ServiceAccount
          name: admin-user
          namespace: kube-system
        EOF
      args:
        executable: /bin/bash

    - name: Wait for Dashboard pod to be Ready
      shell: |
        kubectl wait --namespace kube-system --for=condition=ready pod -l k8s-app=kubernetes-dashboard --timeout=300s

    - name: Create dashboard access token
      shell: |
        kubectl -n kube-system create token admin-user
      register: dashboard_token
      changed_when: false

    - name: Display dashboard token
      debug:
        msg: "Dashboard token: {{ dashboard_token.stdout }}"

    # --- Install ArgoCD CLI
    - name: Download ArgoCD CLI binary
      get_url:
        url: "https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64"
        dest: "/usr/local/bin/argocd"
        mode: '0755'

    - name: Verify ArgoCD CLI
      command: argocd version --client
      register: argocd_version
      ignore_errors: yes

    - name: Show ArgoCD CLI version
      debug:
        msg: "{{ argocd_version.stdout_lines }}"

    # --- Fetch ArgoCD Admin Password
    - name: Fetch ArgoCD initial admin password
      shell: |
        kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 --decode
      register: argocd_admin_password
      changed_when: false

    - name: Show ArgoCD admin password
      debug:
        msg: "ArgoCD admin password: {{ argocd_admin_password.stdout }}"

    # --- Install Argo Workflows
    - name: Create argo namespace
      command: kubectl create namespace argo
      register: argo_ns
      failed_when: argo_ns.rc != 0 and 'AlreadyExists' not in argo_ns.stderr
      changed_when: "'created' in argo_ns.stdout.lower()"

    - name: Install Argo Workflows
      shell: |
        kubectl apply -n argo -f https://github.com/argoproj/argo-workflows/releases/download/v3.6.5/quick-start-minimal.yaml
      args:
        executable: /bin/bash

    # --- Install Argo Events
    - name: Create argo-events namespace
      command: kubectl create namespace argo-events
      register: argo_events_ns
      failed_when: argo_events_ns.rc != 0 and 'AlreadyExists' not in argo_events_ns.stderr
      changed_when: "'created' in argo_events_ns.stdout.lower()"

    - name: Install Argo Events
      shell: |
        kubectl apply -n argo-events -f https://github.com/argoproj/argo-events/releases/download/v1.9.6/install.yaml
      args:
        executable: /bin/bash

    # --- Copy ArgoCD Admin Secret to Argo namespace
    - name: Get ArgoCD admin secret YAML
      command: kubectl get secret argocd-initial-admin-secret -n argocd -o yaml
      register: secret_yaml

    - name: Modify secret namespace
      set_fact:
        updated_secret_yaml: >-
          {{ secret_yaml.stdout
            | regex_replace('namespace: .*', 'namespace: argo')
            | regex_replace('  resourceVersion: .*', '')
            | regex_replace('  uid: .*', '')
            | regex_replace('  creationTimestamp: .*', '') }}

    - name: Apply modified secret
      shell: |
        echo "{{ updated_secret_yaml }}" | kubectl apply -n argo -f -
      register: apply_result

    - name: Show secret apply result
      debug:
        var: apply_result.stdout

    # --- DNS Fix
    - name: Set DNS for interface ens4
      command: resolvectl dns ens4 127.0.0.1

    - name: Restart CoreDNS deployment
      command: kubectl -n kube-system rollout restart deployment coredns
